<?xml version="1.0" encoding="UTF-8"?>
<!-- Bean头部 -->    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xmlns:p="http://www.springframework.org/schema/p"    
    xmlns:mvc="http://www.springframework.org/schema/mvc"    
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:util="http://www.springframework.org/schema/util"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd    
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">    
     
    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->     
    <context:component-scan base-package="com.eBookingCn" />   
      
    <!-- <bean id="myJobBean" class="com.yangcq.quartz.MyJobBean"></bean> -->  
    <bean id="eBookingJobBean" class="com.eBookingCn.EBookingJobBean">
    	<property name="remoteUrl" value="${RemoteUrl}"></property>
    	<property name="permit" value="${Permit}"></property>
    	<property name="key" value="${Key}"></property>
    	<property name="operation" value="${Operation}"></property>
    	<property name="custCode" value="${custCode}"></property>
    	<property name="supplierCode" value="${supplierCode}"></property>
    	<property name="encrypt" value="${Encrypt}"></property>
    </bean>  
     
    <!-- 
    <bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">    
         <property name="targetObject" ref="myJobBean" />     
        <property name="targetMethod" value="printAnotherMessage" />    
    </bean>    -->
    <!-- 这种封装的方式很简单，就是我定义了一个对象和它对应的方法。如果我们需要将它们封装成一个job了，只要把类的名字和 -->  
    <!-- 对应的方法传进去就可以了。除了上述的JobDetail构造方式，还要一种更复杂一些，它的定义如下： -->  
    <!--   这里因为要用到一些对象的引用，对这些对象或者参数的传递可以通过jobDataMap来处理。 -->  
    <bean name="complexJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">    
        <property name="targetObject" ref="eBookingJobBean" />    
        <property name="targetMethod" value="printAnotherMessage" />   
    </bean>   
      
    <!-- Spring提供了2中触发器：SimpleTriggerBean 和 CronTriggerBean -->  
      
    <!-- Trigger触发器 ：从第1秒开始，每5秒执行一次 -->  
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">    
        <property name="jobDetail" ref="complexJobDetail" />    
        <!--<property name="cronExpression" value="0 0 19 * * ?" />-->    
        <property name="cronExpression" value="0 0 19 * * ?" />
    </bean>    
      
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">    
        <property name="jobDetails">    
            <list>    
                <!-- <ref bean="simpleJobDetail" /> -->    
                <ref bean="complexJobDetail" />    
            </list>    
        </property>    
    
        <property name="triggers">    
            <list>    
                <!--  <ref bean="simpleTrigger" />    -->
                <ref bean="cronTrigger" />    
            </list>    
        </property>    
    </bean>    
    
</beans>   